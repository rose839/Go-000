// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rose839_order_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SaveOrderClient is the client API for SaveOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaveOrderClient interface {
	SaveOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Resp, error)
}

type saveOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveOrderClient(cc grpc.ClientConnInterface) SaveOrderClient {
	return &saveOrderClient{cc}
}

func (c *saveOrderClient) SaveOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/rose839.order.v1.SaveOrder/SaveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaveOrderServer is the server API for SaveOrder service.
// All implementations must embed UnimplementedSaveOrderServer
// for forward compatibility
type SaveOrderServer interface {
	SaveOrder(context.Context, *Order) (*Resp, error)
	mustEmbedUnimplementedSaveOrderServer()
}

// UnimplementedSaveOrderServer must be embedded to have forward compatible implementations.
type UnimplementedSaveOrderServer struct {
}

func (UnimplementedSaveOrderServer) SaveOrder(context.Context, *Order) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrder not implemented")
}
func (UnimplementedSaveOrderServer) mustEmbedUnimplementedSaveOrderServer() {}

// UnsafeSaveOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaveOrderServer will
// result in compilation errors.
type UnsafeSaveOrderServer interface {
	mustEmbedUnimplementedSaveOrderServer()
}

func RegisterSaveOrderServer(s grpc.ServiceRegistrar, srv SaveOrderServer) {
	s.RegisterService(&_SaveOrder_serviceDesc, srv)
}

func _SaveOrder_SaveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveOrderServer).SaveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rose839.order.v1.SaveOrder/SaveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveOrderServer).SaveOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

var _SaveOrder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rose839.order.v1.SaveOrder",
	HandlerType: (*SaveOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOrder",
			Handler:    _SaveOrder_SaveOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
